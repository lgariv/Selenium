name: Build 
on:
  release:
    types:
      - created
jobs:
  build:
    name: Build App
    runs-on: macOS-latest
    env:
      THEOS: theos

    steps:
    - name: Checkout
      uses: actions/checkout@master
    - name: Install Dependencies
      run: |
        brew install ldid xz make
        echo PATH=\"$(brew --prefix make)/libexec/gnubin:\$PATH\"
    - name: Setup Theos
      uses: actions/checkout@master
      with:
        repository: lgariv/theos
        ref: abd8d442ba2df9c1cc1b1133e28bda31d704ba7f
        path: theos
        submodules: recursive
    - name: Build Package
      id: build_package
      run: |
        VERSION="$(cat control | grep Version | sed -n 's/Version: //gp')"
        echo "::set-env name=TWEAK_VER::$VERSION"
        make package FINALPACKAGE=1
        echo "::set-output name=package::$(ls -t packages | head -n1)"
    - name: Manage Version
      if: ${{ steps.build_package.outputs.package != 0 }}
      run: |
        set +e
        git fetch --prune --unshallow --tags
        VERSION="$(cat control | grep Version | sed -n 's/Version: //gp')"
        echo "::set-env name=TWEAK_VER::$VERSION"
        CUR_TAG="$(git tag -l | grep beta)"
        if [[ -z $CUR_TAG ]]; then
          echo "::set-env name=OLD_PRE_TAG::"
        else
          echo "::set-env name=OLD_PRE_TAG::$CUR_TAG"
        fi
        exit 0
        set -e
    - name: Delete Old Prerelease (if there are any)
      uses: dev-drprasad/delete-tag-and-release@v0.1.2
      if: ${{ env.OLD_PRE_TAG != 0 && steps.build_package.outputs.package != 0 }}
      with:
        tag_name: ${{ env.OLD_PRE_TAG }}
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
    - name: Create Release
      if: ${{ steps.build_package.outputs.package != 0 }}
      id: create_release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: v${{ env.TWEAK_VER }}
        release_name: Release v${{ env.TWEAK_VER }}
        draft: false
        prerelease: false
    - name: Upload Release Asset
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}          
        asset_path: ./packages/${{ steps.build_package.outputs.package }}
        asset_name: ${{ steps.build_package.outputs.package }}
        asset_content_type: application/vnd.debian.binary-package